              _                     _              _
             (_)                   (_)            | |
              _ _   _ _ __   ___    _ _ __ ___  __| |
             | | | | | '_ \ / _ \  | | '__/ __|/ _` |
             | | |_| | | | | (_) |-| | | | (__| (_| | v0.4.1
#############| |\__,_|_| |_|\___/  |_|_|  \___|\__,_|#############
            _/ |  Perl Internet Relay Chat daemon
           |__/ 

about
-----
In July 2010, I found pIRCd, the perl internet relay chat daemon. while learning
Perl, I added a few more features to it; however, I caused several disadvantages,
bugs, and memory failures. I decided to start over from scratch because if I wrote
it myself I would understand more how to modify it and work around the issues that
I had when I was working on the perl IRC daemon that Jay Kominek wrote 13 years ago.
It is written mostly from scratch; however, I will not take credit for the many
concepts from pIRCd that I have used in my writing.

license
-------
juno-ircd is released under the New BSD License (see LICENSE.)

setting up/installation
-----------------------
one thing I have tried to do is to make it as simple as possible to setup and install, so
there is no install script and there are no files that the IRCd requires to be built before
it is started. for this reason, there is an 'enable' block in the configuration to enable
certain features that were originally to be enabled in installation; but as long as the etc
directory is readable and writable, you should be ready to enjoy juno, that is, of course, after
you edit etc/ircd.conf.example and read the comments. the configuration is setup very simply.
the first word of a line is the value you're setting, and everything beyond it is the value
you are setting it to (except for in oper, listen, etc blocks.) when you finish configuring,
just start juno.pl.
--config=/path/to/config # use a configuration other than etc/ircd.conf
--nofork # prevent the IRCd from running in the background

support
-------
if you are in need of assistance, you are likely to find me on my development
network at cooper.on.fgtb.us #k. If I'm not there, I'm probably on irc.alphachat.net.
this is pretty basic when it comes to the style of which it's written, so if you know
a little bit of Perl editing it should be fairly easy.

requirements
------------
you must have the following perl modules to run juno:
-
IO::Select (core)
IO::Socket::INET (core)
Socket (core)
POSIX (core)
if IPv6 enabled: IO::Socket::INET6  and Socket6
if SSL enabled: IO::Socket::SSL
-
currently, all required modules are core perl modules, so you should be okay.
if you wish to install IO::Socket::INET6 and IO::Socket::SSL for SSL and IPv6
support, use cpan to install te modules.

Plans - things I plan to do
---------------------------
I'm not going to put anything here until I run out of useful things to do.

TODO - things I NEED to do
--------------------------
CAP
only accept hosts if the resolution matches the client address
show modes alphabetical, capitals first.
KICK command
USERMODE command
VERSION command
fix bug where you must have op to view the ban list (?)
make it so you can't change your nick if you're banned in a channel you're in
WHO user
channel names may not contain ASCII character 7
create a script to start, stop, and rehash.

done - things I've done already
-------------------------------
configuration parser
client listening (non-ssl)
ping system
IPv6 support
pre-registration commands (nick,user)
host resolving
MOTD command
nick change
LUSERS command
ping/pong
WHOIS command
hostname cloaking
PRIVMSG to users
AWAY command
OPER and everything related
KILL command and oper:kill flag
basic channel structure
JOIN command
NAMES command
WHO command (channels only)
MODE command
PART command
flood protection
REHASH command
IRC operator server notices
KLINE by configuration
GLOBOPS command
channel/user mode parser
channel topics/TOPIC command
channel bans
channel mutes
channel invite exeptions
channel ban exceptions
SSL support

user modes
----------
i invisible
o IRC operator
x cloaking enabled
S oper snotices enabled
Z SSL connection

channel modes
-------------
t only operators can set the topic
q owner status
a protected status
o operator status
h half-operator status
v voiced status
m only users with voice or higher status can speak
b ban
Z mute
I invite exception
e exception

oper flags
----------
kill - kill a user
rehash - rehash config
globops - send globops to all opers
