#!/usr/bin/perl -w
# Copyright (c) 2011, Mitchell Cooper

use warnings;
use strict;
use feature qw/say switch/;

# this allows juno to be started properly from any directory
my $NOFORK;
our $DIR;
BEGIN {
    $DIR = shift @ARGV;

    # we *must* have this argument to load modules properly,
    # so die if we don't
    die "No directory specified (you probably want to use the juno script in your installation directory)\n" unless defined $DIR;

    # no error
    push @INC, $DIR;

    # NOFORK
    $NOFORK = 1 if 'NOFORK' ~~ @ARGV

}

use POSIX;
use IO::Select;
use IO::Socket;

use user;
use handle;
use channel;
use utils qw/fatal conf hostmatch snotice/;

local $0 = 'juno';
$SIG{$_} = \&sigdie foreach qw/INT TERM KILL/;
$SIG{'HUP'} = \&sighup;


# set a bunch of stuff we'll use later...
our $VERSION = &getversion;
our $TIME = time;
our $CONFIG = $DIR.'/etc/ircd.conf';
my $PID = my $API = 0;
our $ACCEPTING = 1;
our (%config, %oper, %kline, %dline, %listen, %outbuffer, %inbuffer, %timer, %loops);
my (%listensockets, %SSL, @sel, $ipv6, $loop);

# parse the configuration file (usually etc/ircd.conf)
confparse($CONFIG);

our $id = conf qw/server id/;

# load the modules required to run this juno installation -
# most of these can be set in the enabled section of the configuration.
&loadrequirements;

# begin listening on clients
&createsockets;

# if not in debug mode, become a daemon
if (!$NOFORK) {
    say 'Becoming a daemon...';

    # since there will be no input or output from here on,
    # open the filehandles to /dev/null
    open STDIN, '<', '/dev/null' or fatal("Can't read /dev/null: $!");
    open STDOUT, '>', '/dev/null' or fatal("Can't write /dev/null: $!");
    open STDERR, '>', '/dev/null' or fatal("Can't write /dev/null: $!");

    # write the PID file that is used by the start/stop/rehash script.
    open my $pidfh, '>', $DIR.'/etc/juno.pid' or fatal("Can't write $DIR/etc/juno.pid");
    $PID = fork;
    say $pidfh $PID if $PID;
    close $pidfh

}

exit if $PID;
&POSIX::setsid;

# create the IO::Select object for listening sockets,
# and exit if the server is not listening at all.
fatal('not listening') if $#sel < 0;
our $select = new IO::Select @sel;

# main loop that is run through every x seconds, as defined by main:timeout
# or every time the IRC sockets read or write data.
for (;;) {

    # read incoming data
    foreach my $client ($select->can_read(conf qw/main timeout/)) {
        my $time = time;
        my $user = user::lookup($client);
        $timer{$client} = 0 unless $timer{$client};

        # this is a new socket waiting to be accepted, so we create a new user.
        if (exists $listensockets{$client}) {
            new user (($SSL{$client} ? 1 : 0), $client->accept)
        }

        # this is a user sending data
        else {
            $time = time;
            $timer{$client} = $time if $timer{$client} < $time;

            # check for incoming data
            if (sysread $client, my $data, POSIX::BUFSIZ) {

                # add the data to the incoming buffer
                $inbuffer{$client} .= $data

            }

            # dead socket; force the user to quit
            else {
                $user->quit('Connection closed', 1)
            }

        }
        delete $inbuffer{$client}, next unless $user;
        next unless exists $inbuffer{$client};

        # flood check
        my ($theline, $therest);
        while (($timer{$client}-(conf qw/flood lines/) <= $time) &&
          (($theline, $therest) = $inbuffer{$client} =~ m/([^\n]*)\n(.*)/s)) {
            $inbuffer{$client} = $therest;
            $theline =~ s/\r$//;

            # they're okay, so handle the data
            handle::user($client, $theline);

            $timer{$client}++
        }

        # they've reached their limit; force them to quit
        $user->quit(conf qw/flood msg/) if length $inbuffer{$client} > conf qw/flood bytes/;

    }

    # write outgoing data
    foreach my $client ($select->can_write(0)) {

        # nothing to write
        next unless $outbuffer{$client};

        # send the data
        my $sent = syswrite $client, $outbuffer{$client}, POSIX::BUFSIZ;
        if (defined $sent && $sent <= length $outbuffer{$client} || $! == POSIX::EWOULDBLOCK) {
            (substr $outbuffer{$client}, 0, $sent) = '';
            delete $outbuffer{$client} unless length $outbuffer{$client}
        }

        # can't write to this socket, so give up and force the user to quit
        else {
            user::lookup($client)->quit('Write error', 1)
        }

    }

    # check for ping timeouts
    foreach my $client (values %user::connection) {
        if ((time-$client->{'ping'}) > conf qw/ping freq/) {

            # send a PING command and reset the ping time
            $client->send('PING :'.conf qw/server name/);
            $client->{'ping'} = time;

            # make sure that they aren't just sitting there without registering...
            $client->quit('Registration timeout') unless $client->{'ready'}

        }
        if ((time-$client->{'last'}) > conf qw/ping timeout/) {

            # too late; making them quit
            # (the quit message is defined in ping:msg)
            my $ping = sprintf conf(qw/ping msg/), (time-$client->{'last'});
            $client->quit($ping, undef)

        }
    }

    # run through registered loops
    while (my ($loop, $cv) = each %loops) {
        $cv->{code}($loop)
    }

}

# add data to the outgoing buffer
sub sendpeer {
    my $peer = shift;
    $outbuffer{$peer} .= "$_\r\n" foreach @_
}

# force juno to exit
sub sigdie {
    say 'Preparing to exit...';

    # remove each user properly
    foreach (values %user::connection) {
        $_->quit('Server shutdown');
        say '    Removing user '.$_->{'id'}
    }

    # remove the PID file so the start script knows that juno is not running
    if (!$NOFORK) {
        say 'Deleting PID file.';
        unlink $DIR.'/etc/juno.pid' or fatal('Couldn\'t delete PID file.');
    }

    fatal('Exiting by signal.', 1)
}

# HUP signal (rehash)
sub sighup {
    snotice('Receieved SIGHUP, rehashing server configuration file.');
    say 'Receieved SIGHUP, rehashing server configuration file.';
    confparse($CONFIG)
}

# load a configuration file
sub confparse {
    my $file = shift;
    say 'Loading configuration: '.$file;
    open my $CONF, '<', $file or fatal('Cannot open configuration file: '.$file);

    # call API event
    event('rehash', $file);

    # unset the former options
    if (!shift) {
        undef %kline; undef %dline; undef %config; undef %oper;
        delete $utils::GV{'motd'};
    }

    # keep track of the sections and their names
    my @sections;
    my $current = 0;
    my $reset = sub {
        my $cur = shift;
        undef @sections;
        $sections[$cur] = shift;
        $current = $cur
    };

    while (my $line = <$CONF>) {

        $line =~ s/\t//g;
        $line =~ s/^\s+//;
        $line =~ s/\s+$//;
        next if $line eq '';
        next if $line =~ m/^#/;
        my @s = split /\s+/, $line, 2;
        given($s[0]) {

            # set the section name
            when ('sec') {
                $reset->(0, $s[1])

            }

            # include another file
            when ('inc') {
                $reset->(0, 0);
                confparse($s[1], 1)

            }

            # oper block
            when ('oper') {
                $reset->(1, $s[1])

            }

            # kline block
            when ('kline') {
                $reset->(2, $s[1])
            }

            # listen block
            when ('listen') {
                $reset->(3, $s[1])
            }

            # dline block
            when (/^(d|z)line$/) {
                $reset->(4, $s[1])
            }

            # must be a key and value
            default {
                given ($current) {
                    when (0) {
                        $config{$sections[$current]}{$s[0]} = $s[1]
                    }
                    when (1) {
                        $oper{$sections[$current]}{$s[0]} = $s[1]
                    }
                    when (2) {
                        $kline{$sections[$current]}{$s[0]} = $s[1]
                    }
                    when (3) {
                        $listen{$sections[$current]}{$s[0]} = $s[1]
                    }
                    when (4) {
                        $dline{$sections[$current]}{$s[0]} = $s[1]
                    }
                    default {
                        fatal('no section set in configuration')
                    }
                }
            }
        }
    }

    # check each user for a Z-Line or a K-Line
    foreach my $user (values %user::connection) {

        # check for a Z-Line
        foreach (keys %dline) {
            if (hostmatch($user->{'ip'}, $_)) {

                # found a match!
                $user->quit('Z-Lined: '.$dline{$_}{'reason'},
                    undef,
                    'Z-Lined'.((conf qw/main showdline/) ? q(: ).$dline{$_}{'reason'} : q..)
                );
            }
        }

        # check for a K-Line
        $user->checkkline
    }

    # load the MOTD file
    &loadmotd;
    close $CONF;

    # call API event
    event('rehash_done', $file);

    return 1
}

# load the MOTD file.
sub loadmotd {
    say 'Loading MOTD: '.$DIR.'/'.conf qw/server motd/;

    # if we can't open the file, replace the MOTD with a "not found" message
    open my $MOTD, $DIR.'/'.conf qw/server motd/ or $utils::GV{'motd'} = 'MOTD file is missing.', return;

    # set the MOTD
    $utils::GV{'motd'} .= $_ while <$MOTD>;

    close $MOTD;
    return 1
}

# create listening sockets for clients
sub createsockets {
    say 'Opening client sockets...';
    foreach my $name (keys %listen) {
        my $socket;

        # non-SSL listening
        foreach my $port (split /\s+/, $listen{$name}{'port'}) {

            # false, so let's assume they wanted to disable it and continue to the next port
            last if $port == 0;

            say "    Listening on [$name]:$port";

            # use IO::Socket::INET6 if IPv6 is enabled in the configuration (enabled:ipv6)
            if ($ipv6) {
                $socket = IO::Socket::INET6->new(
                    Listen => 1,
                    ReuseAddr => 1,
                    LocalPort => $port,
                    LocalAddr => $name
                ) or fatal('Could not listen: block ['.$name.']:'.$port.': '.$!)
            }

            # otherwise use IO::Socket::INET
            else {
                $socket = IO::Socket::INET->new(
                    Listen => 1,
                    ReuseAddr => 1,
                    LocalPort => $port,
                    LocalAddr => $name
                ) or fatal('Could not listen: block '.$name.':'.$port.': '.$!)
            }

            # success! add to IO::Select object
            push @sel, $socket if $socket;
            $listensockets{$socket} = $port if $socket

        }

        # SSL listening
        foreach my $port (split /\s+/, $listen{$name}{'ssl'}) {

            # false, so let's assume they wanted to disable it and continue to the next port
            last if $port == 0;

            # first make sure they have SSL enabled in the first place
            if (!conf qw/enabled ssl/) {
                fatal('You tried to listen using SSL, but SSL is not enabled in the configuration.')
            }

            say "    Listening SSL on [$name]:$port";

            # create the socket
            $socket = IO::Socket::SSL->new(
                Listen => 1,
                ReuseAddr => 1,
                LocalPort => $port,
                LocalAddr => $name,
                SSL_cert_file => conf qw/ssl cert/,
                SSL_key_file => conf qw/ssl key/
            ) or fatal('Could not listen (SSL): block '.$name.':'.$port.': '.$!);

            # success! add to IO::Select object
            if ($socket) {
                push @sel, $socket;
                $listensockets{$socket} = $port;
                $SSL{$socket} = 1
            }

            # IO::Socket::SSL is pretty ugly, by the way

        }
    }
}

# load the required Perl modules, as defined in the enabled section of the configuration
sub loadrequirements {
    say 'Loading required modules...';

    # IPv6 support
    if (conf qw/enabled ipv6/) {
        say '    Loading IPv6 module';
        $ipv6 = 1;
        require IO::Socket::INET6 or fatal('Could not load IPv6 module. (Do you have IO::Socket::INET6 installed?)')
    }

    # SSL support (IO::Socket::SSL fails.)
    if (conf qw/enabled ssl/) {
        say '    Loading SSL module';
        require IO::Socket::SSL or fatal('Could not load SSL module. (Do you have IO::Socket::SSL installed?)');
        if (conf qw/enabled ipv6/) {
            say '        Importing IPv6 support to SSL module';
            IO::Socket::SSL->import('inet6')
        }
    }

    # cloaking support
    if (conf qw/enabled cloaking/) {
        say '    Loading cloaking module';
        require Digest::SHA or fatal('Could not load cloaking module. (Do you have Digest::SHA installed?)');
        &user::DigestImport
    }

    if (conf qw/enabled api/) {
        say '    Loading module API';
        require API::Core;
        $API = 1;
        &API::Core::begin
    }

    # no problems!
    say 'All required modules have been loaded successfully.';
    return 1

}

# fetch the version of this juno installation
sub getversion {
    open my $versionfile, '<', $DIR.'/etc/version' or fatal("Couldn't read version file");
    my $version = <$versionfile>;
    close $versionfile;
    $version =~ s/\s+$//;
    return $version
}

### denny's loop functions

# add something to the main loop
sub register_loop {
    my ($name, $source, $code) = @_;
    $loops{++$loop} = {
        name => $name,
        source => $source,
        code => $code
    };
    say 'Registered loop: '.$name;
    return $loop
}

# delete something from the main loop
sub delete_loop {
    my $id = shift;
    say 'Deleting loop '.$loops{$id}{name}.':'.$id;
    delete $loops{$id};
    return 1
}

sub event {
    return unless $API;
    API::Event::event(@_)
}

1
